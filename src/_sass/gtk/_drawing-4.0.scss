// generic drawing of more complex things


// ripple effect animations

@keyframes ripple {
  to {
    background-size: 1000% 1000%;
  }
}

@keyframes ripple-on-slider {
  to {
    background-size: auto, 1000% 1000%;
  }
}

@keyframes ripple-on-headerbar {
  from {
    background-image: radial-gradient(circle, $primary 0%, transparent 0%);
  }

  to {
    background-image: radial-gradient(circle, $primary 100%, transparent 100%);
  }
}


@mixin entry($t, $fc: $primary) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {
    transition-property: all, border-image, box-shadow;
    transition-duration: $duration, $ripple-fade-in-duration, $ripple-fade-in-duration;
    transition-timing-function: $ease-out;
    border-image: radial-gradient( circle closest-corner at center calc(100% - 1px), $fc 0%, transparent 0%) 2 / 0 0 0px;
    box-shadow: inset 0 -1px if($fc == $primary, $track, $fc), inset 0 -2px transparent;
    background-color: $fill;
    color: $text;
    outline: none;
    caret-color: $fc;
  }

  @if $t == hover {
    box-shadow: inset 0 -1px transparent, inset 0 -2px if($fc == $primary, $track, $fc);
    background-color: $fill;
    outline: none;
    color: $text;
  }

  @if $t == focus {
    box-shadow: inset 0 -1px if($fc == $primary, $track, $fc);
    background-color: $fill;
    outline: none;
    color: $text;
  }

  @if $t == checked {
    transition-duration: $duration, $ripple-fade-in-duration, $ripple-fade-in-duration;
    animation: ripple $ripple-fade-in-duration $ease-out forwards;
    border-image: radial-gradient( circle closest-corner at center calc(100% - 1px), $fc 100%, transparent 0%) 2 / 0 0 2px;
    box-shadow: inset 0 -1px transparent, inset 0 -2px gtkalpha($fc, 0.2);
    background-color: $fill;
    color: $text;
  }

  @if $t == disabled {
    box-shadow: inset 0 -1px $track-disabled;
    background-color: $overlay-normal;
    color: $text-disabled;
  }

  @if $t == raised-normal {
    transition: $transition;
    border-image: none;
    box-shadow: $shadow-z1;
    background-color: if($fc == $primary, $surface, $fc);
    color: if($fc == $primary, $text, on($fc));
  }

  @if $t == raised-hover {
    box-shadow: $shadow-z3;
  }

  @if $t == raised-focus {
    border-image: none;
    box-shadow: $shadow-z3;
  }

  @if $t == raised-disabled {
    box-shadow: $shadow-z1;
    background-color: $base-alt;
    color: $text-disabled;
  }
}

%ripple {
  transition-property: all, border-image, background-size, background-image, font-weight, outline;
  transition-duration: $duration, $ripple-fade-in-duration, $ripple-fade-out-duration, $ripple-fade-out-opacity-duration, 0ms, 0ms;
  transition-timing-function: $ease-out;
  background-image: radial-gradient(circle, transparent 10%, transparent 10%);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 1000% 1000%;

  &:active {
    transition-duration: $duration, $ripple-fade-in-duration, 0ms, 0ms, 0ms, 0ms;
    animation: ripple $ripple-fade-in-duration $ease-out forwards;
    background-image: radial-gradient(circle, $overlay-active 10%, transparent 10%);
    background-size: 0% 0%;
  }
}

@mixin button($t) {
//
// button
//
// $t: button type
//

  @if $t == normal {
    color: $text;
    background-color: $surface;
    border: none;

    @if $variant == 'light' {
      outline: 1px solid $divider;
      outline-offset: -1px;
    } @else {
      outline: none;
    }
  }

  @if $t == hover {
    box-shadow: $shadow-z4;
    outline: none;
    background-color: $surface;
  }

  @if $t == focus {
    outline: 2px solid rgba($primary, 0.35);
    outline-offset: 0;
    box-shadow: none;
    transition: none;
  }

  @if $t == active {
    box-shadow: $shadow-z8;
    background-color: $overlay-hover;
    background-image: radial-gradient(circle, $overlay-active 10%, transparent 10%);
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $fill;
    color: $text-disabled;

    @if $variant == 'light' {
      outline-color: $fill;
    }
  }

  @if $t == checked {
    box-shadow: none;
    background-color: $primary;
    color: on($primary);
    outline: none;
  }

  @if $t == checked-hover {
    box-shadow: 0 3px 3px -3px rgba($primary, 0.3),
                0 2px 3px -1px rgba($primary, 0.24),
                0 2px 5px 0 rgba($primary, 0.12);
  }

  @if $t == checked-disabled {
    background-color: $fill;
    color: $text-disabled;
    outline: none;
  }

  @if $t == flat-normal {
    outline: none;
    background-color: transparent;
    color: $text-secondary;
    box-shadow: none;
  }

  @if $t == flat-hover {
    box-shadow: none;
    background-color: $overlay-hover;
    color: $text;
    outline: none;
  }

  @if $t == flat-focus {
    box-shadow: none;
    color: $text;
    outline: 2px solid $overlay-focus;
    outline-offset: -2px;
  }

  @if $t == flat-active {
    background-image: radial-gradient(circle, $overlay-active 10%, transparent 10%);
    color: $text;
    box-shadow: none;
  }

  @if $t == flat-checked {
    background-color: $overlay-checked;
    color: $text;
    box-shadow: none;
  }

  @if $t == flat-checked-disabled {
    background-color: $overlay-checked;
    color: $text-disabled;
  }

  @if $t == flat-disabled {
    box-shadow: none;
    background-color: transparent;
    color: $text-secondary-disabled;
  }
}

@mixin linked-button($r: $corner-radius) {
  border-radius: $r;

  &:not(:first-child) {
    border-top-left-radius: $r;
    border-bottom-left-radius: $r;
  }

  &:not(:last-child) {
    border-top-right-radius: $r;
    border-bottom-right-radius: $r;
  }

  &:first-child {
    border-top-left-radius: $r;
    border-bottom-left-radius: $r;
  }

  &:last-child {
    border-top-right-radius: $r;
    border-bottom-right-radius: $r;
  }
}


@mixin overshoot($p) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_position: center $p;

  @if ($p == left) or ($p == right) {
    $_position: $p center;
  }

  background-size: 200% 70%;

  background-image:
    radial-gradient(
      farthest-side at $p,
      rgba($text, 0.15) 99%,
      rgba($text, 0) 100%
    );

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: $track;
  $_undershoot_color_light: transparent;

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-color: transparent; // shouldn't be needed, but better to be sure

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  margin: 0 4px;

  @if ($p == left) or ($p == right) {
    margin: 4px 0;
  }
}
